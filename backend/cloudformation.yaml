AWSTemplateFormatVersion: '2010-09-09'
Description: >
  SOC-AI Serverless Backend: Lambda (Python), Pinecone, Aurora Serverless, Redis (ElastiCache), API Gateway

Parameters:
  OpenAIApiKey:
    Type: String
    Description: OpenAI API Key (for embeddings)
  PineconeApiKey:
    Type: String
    Description: Pinecone API Key
  PineconeEnv:
    Type: String
    Description: Pinecone Environment (e.g., us-west1-gcp)
  PineconeIndex:
    Type: String
    Description: Pinecone Index Name
  DBUsername:
    Type: String
    Description: Aurora DB Username
  DBPassword:
    Type: String
    NoEcho: true
    Description: Aurora DB Password
  DBName:
    Type: String
    Default: soc_ai
    Description: Aurora DB Name
  RedisPassword:
    Type: String
    NoEcho: true
    Description: Redis Password

Resources:

  # VPC for Lambda, Aurora, and Redis
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: soc-ai-vpc

  # Subnets (2 for HA)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: soc-ai-public-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: soc-ai-public-2

  # Security Group for Lambda, Aurora, Redis
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda access to Aurora and Redis
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.0.0/16
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: soc-ai-lambda-sg

  # Aurora Serverless Cluster (Postgres)
  AuroraCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-postgresql
      EngineMode: serverless
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DatabaseName: !Ref DBName
      DBSubnetGroupName: !Ref AuroraSubnetGroup
      VpcSecurityGroupIds: [!Ref LambdaSecurityGroup]
      BackupRetentionPeriod: 1
      EnableHttpEndpoint: true
      DeletionProtection: false

  AuroraSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Aurora
      SubnetIds: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      DBSubnetGroupName: soc-ai-aurora-subnet-group

  # ElastiCache Redis Cluster
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for Redis
      SubnetIds: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      CacheSubnetGroupName: soc-ai-redis-subnet-group

  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      Engine: redis
      CacheNodeType: cache.t3.micro
      NumCacheNodes: 1
      VpcSecurityGroupIds: [!Ref LambdaSecurityGroup]
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      EngineVersion: 6.x
      AuthToken: !Ref RedisPassword
      ClusterName: soc-ai-redis

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: "/"
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - rds-db:connect
                  - rds:DescribeDBClusters
                  - rds:DescribeDBInstances
                  - elasticache:DescribeCacheClusters
                  - elasticache:DescribeReplicationGroups
                Resource: "*"

  # Lambda Function (Python)
  SemanticSearchLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: soc-ai-semantic-search
      Handler: semantic_search.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.11
      Timeout: 30
      MemorySize: 512
      Code:
        S3Bucket: <REPLACE_WITH_DEPLOYMENT_BUCKET>
        S3Key: <REPLACE_WITH_DEPLOYMENT_KEY>
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIApiKey
          PINECONE_API_KEY: !Ref PineconeApiKey
          PINECONE_ENV: !Ref PineconeEnv
          PINECONE_INDEX: !Ref PineconeIndex
          REDIS_HOST: !GetAtt RedisCluster.RedisEndpoint.Address
          REDIS_PORT: '6379'
          REDIS_PASSWORD: !Ref RedisPassword
          AURORA_HOST: !GetAtt AuroraCluster.Endpoint.Address
          AURORA_DB: !Ref DBName
          AURORA_USER: !Ref DBUsername
          AURORA_PASSWORD: !Ref DBPassword
          AURORA_PORT: '5432'

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: soc-ai-api
      Description: API Gateway for SOC-AI Lambda

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: semantic-search

  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - { LambdaArn: !GetAtt SemanticSearchLambda.Arn }

  LambdaApiInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SemanticSearchLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/semantic-search

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint for semantic search
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/semantic-search"
  AuroraEndpoint:
    Description: Aurora Serverless endpoint
    Value: !GetAtt AuroraCluster.Endpoint.Address
  RedisEndpoint:
    Description: Redis endpoint
    Value: !GetAtt RedisCluster.RedisEndpoint.Address